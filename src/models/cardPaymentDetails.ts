import {
  array,
  boolean,
  lazy,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { Card, cardSchema } from './card';
import { DeviceDetails, deviceDetailsSchema } from './deviceDetails';
import { Error, errorSchema } from './error';

/** Reflects the current status of a card payment. */
export interface CardPaymentDetails {
  /**
   * The card payment's current state. It can be one of: `AUTHORIZED`, `CAPTURED`, `VOIDED`,
   * `FAILED`.
   */
  status?: string;
  /**
   * Represents the payment details of a card to be used for payments. These
   * details are determined by the `card_nonce` generated by `SqPaymentForm`.
   */
  card?: Card;
  /**
   * The method used to enter the card's details for the payment.  Can be
   * `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.
   */
  entryMethod?: string;
  /**
   * Status code returned from the Card Verification Value (CVV) check. Can be
   * `CVV_ACCEPTED`, `CVV_REJECTED`, `CVV_NOT_CHECKED`.
   */
  cvvStatus?: string;
  /**
   * Status code returned from the Address Verification System (AVS) check. Can be
   * `AVS_ACCEPTED`, `AVS_REJECTED`, `AVS_NOT_CHECKED`.
   */
  avsStatus?: string;
  /**
   * Status code returned by the card issuer that describes the payment's
   * authorization status.
   */
  authResultCode?: string;
  /** For EMV payments, identifies the EMV application used for the payment. */
  applicationIdentifier?: string;
  /** For EMV payments, the human-readable name of the EMV application used for the payment. */
  applicationName?: string;
  /** For EMV payments, the cryptogram generated for the payment. */
  applicationCryptogram?: string;
  /**
   * For EMV payments, method used to verify the cardholder's identity.  Can be one of
   * `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.
   */
  verificationMethod?: string;
  /**
   * For EMV payments, the results of the cardholder verification.  Can be one of
   * `SUCCESS`, `FAILURE`, or `UNKNOWN`.
   */
  verificationResults?: string;
  /**
   * The statement description sent to the card networks.
   * Note: The actual statement description will vary and is likely to be truncated and appended with
   * additional information on a per issuer basis.
   */
  statementDescription?: string;
  /** Details about the device that took the payment. */
  deviceDetails?: DeviceDetails;
  /**
   * Whether or not the card is required to be physically present in order for the payment to
   * be refunded.  If true, the card is required to be present.
   */
  refundRequiresCardPresence?: boolean;
  /** Information on errors encountered during the request. */
  errors?: Error[];
}

export const cardPaymentDetailsSchema: Schema<CardPaymentDetails> = object({
  status: ['status', optional(string())],
  card: ['card', optional(lazy(() => cardSchema))],
  entryMethod: ['entry_method', optional(string())],
  cvvStatus: ['cvv_status', optional(string())],
  avsStatus: ['avs_status', optional(string())],
  authResultCode: ['auth_result_code', optional(string())],
  applicationIdentifier: ['application_identifier', optional(string())],
  applicationName: ['application_name', optional(string())],
  applicationCryptogram: ['application_cryptogram', optional(string())],
  verificationMethod: ['verification_method', optional(string())],
  verificationResults: ['verification_results', optional(string())],
  statementDescription: ['statement_description', optional(string())],
  deviceDetails: ['device_details', optional(lazy(() => deviceDetailsSchema))],
  refundRequiresCardPresence: [
    'refund_requires_card_presence',
    optional(boolean()),
  ],
  errors: ['errors', optional(array(lazy(() => errorSchema)))],
});
