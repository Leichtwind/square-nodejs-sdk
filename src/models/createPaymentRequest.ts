import { boolean, lazy, object, optional, Schema, string } from '../schema';
import { Address, addressSchema } from './address';
import { Money, moneySchema } from './money';

/**
 * Creates a payment from the source (nonce, card on file, etc.)
 * The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required
 * to enable application fees.
 * For more information, see [Payments and Refunds Overview](https://developer.squareup.com/docs/payments-api/overview).
 * For information about application fees in a payment, see
 * [Collect Fees](https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees).
 */
export interface CreatePaymentRequest {
  /**
   * The ID for the source of funds for this payment.  This can be a nonce
   * generated by the Payment Form or a card on file made with the Customers API.
   */
  sourceId: string;
  /**
   * A unique string that identifies this CreatePayment request. Keys can be any valid string
   * but must be unique for every CreatePayment request.
   * Max: 45 characters
   * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
   */
  idempotencyKey: string;
  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  amountMoney: Money;
  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  tipMoney?: Money;
  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  appFeeMoney?: Money;
  /**
   * The duration of time after the payment's creation when Square automatically cancels the
   * payment. This automatic cancellation applies only to payments that don't reach a terminal state
   * (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.
   * This parameter should be specified as a time duration, in RFC 3339 format, with a minimum value
   * of 1 minute.
   * Notes:
   * This feature is only supported for card payments. This parameter can only be set for a delayed
   * capture payment (`autocomplete=false`).
   * Default:
   * - Card Present payments: "PT36H" (36 hours) from the creation time.
   * - Card Not Present payments: "P7D" (7 days) from the creation time.
   */
  delayDuration?: string;
  /**
   * If set to `true`, this payment will be completed when possible. If
   * set to `false`, this payment will be held in an approved state until either
   * explicitly completed (captured) or canceled (voided). For more information, see
   * [Delayed Payments](https://developer.squareup.com/docs/payments-api/take-payments#delayed-payments).
   * Default: true
   */
  autocomplete?: boolean;
  /** Associate a previously created order with this payment */
  orderId?: string;
  /**
   * The [Customer](#type-customer) ID of the customer associated with the payment.
   * Required if the `source_id` refers to a card on file created using the Customers API.
   */
  customerId?: string;
  /**
   * The location ID to associate with the payment. If not specified, the default location is
   * used.
   */
  locationId?: string;
  /**
   * A user-defined ID to associate with the payment.
   * You can use this field to associate the payment to an entity in an external system.
   * For example, you might specify an order ID that is generated by a third-party shopping cart.
   * Limit 40 characters.
   */
  referenceId?: string;
  /**
   * An identifying token generated by `SqPaymentForm.verifyBuyer()`.
   * Verification tokens encapsulate customer device information and 3-D Secure
   * challenge results to indicate that Square has verified the buyer identity.
   * See the [SCA Overview](https://developer.squareup.com/docs/sca-overview).
   */
  verificationToken?: string;
  /**
   * If set to true and charging a Square Gift Card, a payment may be returned with
   * amount_money equal to less than what was requested.  Example, a request for $20 when charging
   * a Square Gift Card with balance of $5 wil result in an APPROVED payment of $5.  You may choose
   * to prompt the buyer for an additional payment to cover the remainder, or cancel the gift card
   * payment.  Cannot be `true` when `autocomplete = true`.
   * For more information, see
   * [Partial amount with Square gift cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).
   * Default: false
   */
  acceptPartialAuthorization?: boolean;
  /** The buyer's e-mail address */
  buyerEmailAddress?: string;
  /** Represents a physical address. */
  billingAddress?: Address;
  /** Represents a physical address. */
  shippingAddress?: Address;
  /**
   * An optional note to be entered by the developer when creating a payment
   * Limit 500 characters.
   */
  note?: string;
  /**
   * Optional additional payment information to include on the customer's card statement
   * as part of statement description. This can be, for example, an invoice number, ticket number,
   * or short description that uniquely identifies the purchase.
   * Note that the `statement_description_identifier` may get truncated on the statement description
   * to fit the required information including the Square identifier (SQ *) and name of the
   * merchant taking the payment.
   */
  statementDescriptionIdentifier?: string;
}

export const createPaymentRequestSchema: Schema<CreatePaymentRequest> = object({
  sourceId: ['source_id', string()],
  idempotencyKey: ['idempotency_key', string()],
  amountMoney: ['amount_money', lazy(() => moneySchema)],
  tipMoney: ['tip_money', optional(lazy(() => moneySchema))],
  appFeeMoney: ['app_fee_money', optional(lazy(() => moneySchema))],
  delayDuration: ['delay_duration', optional(string())],
  autocomplete: ['autocomplete', optional(boolean())],
  orderId: ['order_id', optional(string())],
  customerId: ['customer_id', optional(string())],
  locationId: ['location_id', optional(string())],
  referenceId: ['reference_id', optional(string())],
  verificationToken: ['verification_token', optional(string())],
  acceptPartialAuthorization: [
    'accept_partial_authorization',
    optional(boolean()),
  ],
  buyerEmailAddress: ['buyer_email_address', optional(string())],
  billingAddress: ['billing_address', optional(lazy(() => addressSchema))],
  shippingAddress: ['shipping_address', optional(lazy(() => addressSchema))],
  note: ['note', optional(string())],
  statementDescriptionIdentifier: [
    'statement_description_identifier',
    optional(string()),
  ],
});
